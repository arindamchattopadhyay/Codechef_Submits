.Kabir wants to impress Tara by showing her his problem solving skills. He has decided to give the correct answer to the next question which will be asked by his Algorithms teacher.

The question asked is: Find the sum of alternate consecutive d odd numbers from the range L to R inclusive.

if d is 3 and L is 10 and R is 34, then the odd numbers between 10 and 34 are 11,13,15,17,19,21,23,25,27,29,31,33, and the d alternate odd numbers are 11,13,15,23,25,27.

You are a friend of Kabir, help him solve the question.

Note: Number of odd number between L and R (both inclusive) is a multiple of d.

Input:
First line will contain T, number of test cases.
First line of each test case contains one integer d .
Second line of each test case contains two space separated integer L and R.
Output:
For each test case, print the sum modulo 1000000007.

Constraints:
1≤T≤106
1≤d≤103
1≤L<R≤106
Sample Input:
1
3 
10 33

Sample Output:
114
EXPLANATION:
Sum of alternate odd numbers i.e, 11,13,15,23,25,27 is 114














Code:-- 

/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;

class FastReader {

    byte[] buf = new byte[2048];
    int index, total;
    InputStream in;

    FastReader(InputStream is) {
        in = is;
    }

    int scan() throws IOException {
        if (index >= total) {
            index = 0;
            total = in.read(buf);
            if (total <= 0) {
                return -1;
            }
        }
        return buf[index++];
    }

    String next() throws IOException {
        int c;
        for (c = scan(); c <= 32; c = scan()) ;
        StringBuilder sb = new StringBuilder();
        for (; c > 32; c = scan()) {
            sb.append((char) c);
        }
        return sb.toString();
    }

    String nextLine() throws IOException {
        int c;
        for (c = scan(); c <= 32; c = scan()) ;
        StringBuilder sb = new StringBuilder();
        for (; c != 10 && c != 13; c = scan()) {
            sb.append((char) c);
        }
        return sb.toString();
    }

    char nextChar() throws IOException {
        int c;
        for (c = scan(); c <= 32; c = scan()) ;
        return (char) c;
    }

    int nextInt() throws IOException {
        int c, val = 0;
        for (c = scan(); c <= 32; c = scan()) ;
        boolean neg = c == '-';
        if (c == '-' || c == '+') {
            c = scan();
        }
        for (; c >= '0' && c <= '9'; c = scan()) {
            val = (val << 3) + (val << 1) + (c & 15);
        }
        return neg ? -val : val;
    }

    long nextLong() throws IOException {
        int c;
        long val = 0;
        for (c = scan(); c <= 32; c = scan()) ;
        boolean neg = c == '-';
        if (c == '-' || c == '+') {
            c = scan();
        }
        for (; c >= '0' && c <= '9'; c = scan()) {
            val = (val << 3) + (val << 1) + (c & 15);
        }
        return neg ? -val : val;
    }
   


    long[] getLongArray(int size) throws Exception {
        long[] ar = new long[size];
        for (int i = 0; i < size; ++i) ar[i] = nextLong();
        return ar;
    }

   int[] getIntArray(int size) throws Exception {
        int[] ar = new int[size];
        for (int i = 0; i < size; ++i) ar[i] = nextInt();
        return ar;
    }

    String[] getStringArray(int size) throws Exception {
        String[] ar = new String[size];
        for (int i = 0; i < size; ++i) ar[i] = next();
        return ar;
    }

}
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
	FastReader sc=new FastReader(System.in);
	StringBuilder sb=new StringBuilder();
	PrintWriter pw=new PrintWriter(System.out);
	int t=sc.nextInt();
	while(t-->0)
	{
	int d=sc.nextInt();
		int l=sc.nextInt();
		int r=sc.nextInt();
		if(l%2==0)
			l++;
		if(r%2==0)
			r--;
		long no_of_Odd_Numbers=(r-l)/2+1;
		long a=l+(d-1);
		long diff=4*d;
		long num_of_groups=(no_of_Odd_Numbers)/d;
		//To convert an alternating series to AP
		long n=(num_of_groups+1)/2;
		long ans=(n*(2*a+(n-1)*diff)/2)%1000000007;
		sb.append((ans*d)%1000000007).append("\n");
	}
	pw.println(sb);
	pw.flush();
	}
}
